#+TITLE: My emacs configuration

# Set to 'yes' in order to use EXWM as your window manager
#+PROPERTY: USE_EXWM yes
#+PROPERTY: header-args :tangle yes

* Conventions
** Document structure
   This file is split in 3 categories:
   - Visual
     Here we load our themes and cursor shape and eye-candy in general
   - EXWM
     Configuration for when we use emacs as a window manager
   - Text editor
     Configuration for editing text

**  :tangle yes/no
   The file conf.el generated by org-babel-load-file is made by tangling so
   we can disable a file/subree/source block by setting 'tangle' to 'no'
   either in the file's/subtree's properties or in the header of the source block.

   We can use this to easily disable parts of the configuration
   (e.g. to disable exwm)
* Installation
  Run this to install
  !!! Do not run if you already have a configuration
#+BEGIN_SRC emacs-lisp :tangle no
  (defun install-org-config ()
   (find-file (expand-file-name "init.el" user-emacs-directory))
   (insert "(require 'package)
  (require 'org)

  (package-initialize)
  (org-babel-load-file
   (expand-file-name \"conf.org\" user-emacs-directory))")
  (save-buffer)
  (kill-buffer))

  (install-org-config)
#+END_SRC
* Visual
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package cyberpunk-theme
    :ensure t)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t
       :config
       (powerline-center-theme))
#+END_SRC
** Cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
** Beacon-mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode t))


#+END_SRC
* EXWM
  :PROPERTIES:
  :header-args: :tangle (org-entry-get nil "USE_EXWM" t)
  :END:
** Base configuration
#+BEGIN_SRC emacs-lisp
   (use-package exwm
    :ensure t)
#+END_SRC

** Default config
#+BEGIN_SRC emacs-lisp
  (require 'exwm-config)
  (exwm-config-default)
#+END_SRC
**  Status bar
#+BEGIN_SRC emacs-lisp
      (require 'exwm-systemtray)
      (exwm-systemtray-enable)
#+END_SRC
** Dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind ("s-d" . dmenu))
   
#+END_SRC
** Applications
***  Terminal
#+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s-<return>") (lambda ()
                                     (interactive)
                                     (ansi-term shell-file-name)))
#+END_SRC
*** Browser
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-b")
                  (lambda ()
                                (interactive)
                                (start-process "Firefox" nil "firefox")))
#+END_SRC
* Text Editor
** Global tweaks
*** Shell-command
    If there is a prefix argument call shell-command so that we don't move the point
    while the command is executing else call async-shell-command
    
#+BEGIN_SRC emacs-lisp
  (defun my-shell-command (&optional p)
    (interactive "P")
    (if p
        (call-interactively 'shell-command)
      (call-interactively 'async-shell-command)))

  (global-set-key (kbd "M-!") 'my-shell-command)
#+END_SRC

*** Windmove
#+BEGIN_SRC emacs-lisp
      (use-package windmove
        :ensure t
        :bind (("C-c h" . windmove-left)
               ("C-c j" . windmove-down)
               ("C-c k" . windmove-up)
               ("C-c l" . windmove-right)))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
      (yas-global-mode t))
#+END_SRC

*** Undo-tree
#+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :ensure t
        :config (setq-default undo-tree-mode t)
        :bind ("C-x /" . undo-tree-visualize))
#+END_SRC
*** IDO
**** Ensure and enable
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :ensure t
    :config 
    (ido-mode t)
    (ido-everywhere t))
#+END_SRC
**** smex
#+BEGIN_SRC emacs-lisp
       (use-package smex
         :ensure t
         :init 
         :config
         (smex-initialize)
         :bind
         ( "M-x" . smex)
         ( "M-X" . smex-major-mode-commands)
         ( "C-c M-x" . execute-extended-command))
#+END_SRC
**** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
**** flx-ido
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure t
    :init 
    :config
    (flx-ido-mode t)
    (setq ido-use-faces nil)
    :bind )
#+END_SRC
*** Nlinum
#+BEGIN_SRC emacs-lisp
      (use-package nlinum
        :ensure t
        :config
        (setq nlinum-format "%6d")
        (global-nlinum-mode))
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init 
    :config
    (setq avy-keys (number-sequence ?a ?z)
          avy-timeout-seconds 0.5)
    :bind
    ("C-c g j" . avy-goto-char-timer)
    ("C-c g l" . avy-goto-line))

#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :init 
        :config (add-hook 'after-init-hook 'global-company-mode)
        :bind )

#+END_SRC
*** God-mode
#+BEGIN_SRC emacs-lisp
          (use-package god-mode
            :ensure t
            :init 
            :config 
            :bind ("ESC M-g" . 'god-mode-all))
#+END_SRC
*** Autopair
#+BEGIN_SRC emacs-lisp
  (use-package autopair 
    :ensure t
    :init 
    :config
    (autopair-global-mode t)
    (setq
     autopair-autowrap t
     autopair-blink t
     autopair-skip-whitespace t)
    :bind )
#+END_SRC
*** Custom functions
**** Config functions
     Visit Config
#+BEGIN_SRC emacs-lisp
  (defun conf-edit ()
    (interactive)
    (find-file (expand-file-name "conf.org" user-emacs-directory)))
#+END_SRC
**** region-reduce-radius
#+BEGIN_SRC emacs-lisp
  (defun region-reduce-radius (dr)
    (interactive "nReduce raduis by: ")
  "Shorten the region by 2*DR while mainaining the center"
    (let ((beg (region-beginning))
          (end (region-end)))
      (deactivate-mark)
      (push-mark (+ beg dr)  t t)
      (goto-char (- end dr))
      (activate-mark)))

  (global-set-key (kbd "C-c r r") 'region-reduce-radius)
#+END_SRC

**** change-word
#+BEGIN_SRC emacs-lisp
    (defun my-kill-word ()
        (interactive)
        (when (= (char-syntax (char-before)) (string-to-char "w"))
          (backward-word))
        (kill-word 1))

    (global-set-key (kbd "C-c w") 'my-kill-word)
#+END_SRC
**** change-inside
#+BEGIN_SRC emacs-lisp
  (require 'autopair)

  (defun my-change-inside (open)
    "Vim-like change inside that accepts the opening character as OPEN"
    (interactive "cChar: ")
    (let ((close (autopair--pair-of open)))
      (when close
          (search-forward (char-to-string open))
          (backward-char)
          (mark-sexp)
          (kill-region (+ (region-beginning) 1) (- (region-end) 1))
          (forward-char))))

  (global-set-key (kbd "C-c i") 'my-change-inside)
#+END_SRC
**** change-outside
     The opposite of change-inside: changes the pair surrounding the balanced expression
     e.g. "foo" -> (foo) -> [foo]
#+BEGIN_SRC emacs-lisp
  (require 'autopair)

  (defun my-change-outside (p1 p2)
    "Switch p1 to p2 as the pair of a balanced sexp"
    (interactive "cChange \ncTo")
    (let ((^p1 (autopair--pair-of p1))
          (^p2 (autopair--pair-of p2)))
      (when (and ^p1 ^p2)
        (search-forward (char-to-string p1))
        (backward-char)
        (mark-sexp)
        (delete-char 1)
        (insert p2)
        (goto-char (- (region-end) 1))
        (delete-char 1)
        (insert ^p2))))


  (global-set-key (kbd "C-c o") 'my-change-outside)
#+END_SRC

*** prettify-symbols
#+BEGIN_SRC emacs-lisp
      (global-prettify-symbols-mode t)
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
    (use-package auctex
      :ensure t
      :defer t)
#+END_SRC
** Org-mode
   :PROPERTIES:
   :header-args: :tangle no
   :END:
*** Install From Repo
#+BEGIN_SRC emacs-lisp
  
#+END_SRC    
*** Global bindings
#+BEGIN_SRC emacs-lisp0
  (setq global-org-keymap (make-sparse-keymap))
  (define-key global-org-keymap (kbd "a") 'org-agenda)
  (define-key global-org-keymap (kbd "l") 'org-store-link)
  (define-key global-org-keymap (kbd "c") 'org-capture)
  (global-set-key (kbd "ESC M-o") global-org-keymap)
#+END_SRC
*** org-bullets
#+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t)
      (add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC

*** TODO org latex preview
    We will configure latex preview to work with unicode fonts
    First we use a backend that supports fontspec

*** org-export
**** latex
     Use xelatex to render unicode characters
#+BEGIN_SRC emacs-lisp
       (setq org-latex-pdf-process
       '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
    Add default latex packages
#+BEGIN_SRC emacs-lisp
  ;; for unicode fonts
  (add-to-list 'org-latex-packages-alist '("" "fontspec" t))
#+END_SRC
     Configure document classes and use a reasonable font
     Some helper functions first
#+BEGIN_SRC emacs-lisp
  ;; default format string for class header
  (setq org-helper-class-generator-default-format-str
        "\\documentclass[%dpt]{%s}
  [DEFAULT-PACKAGES]
  \\setmainfont{%s}
  %s
  [EXTRA]
  [PACKAGES]")

  ;; handles the formating of a class header
  (defun org-helper-create-latex-class-header
      (name &optional font size extra-headers format-string)
    "Creates the document-class header for a given class"
    (format (if format-string format-string org-helper-class-generator-default-format-str)
            (if size size 11)
            name
            (if font font "DejaVu Serif")
            (if extra-headers extra-headers "")))

  ;; We'll use this to create all our document classes for LaTeX export
  (defun org-helper-create-class (name section-alist &optional font size extra-headers header-format-string)
    "Helper function to create document classes"
    (append (list name)
             (list
              (org-helper-create-latex-class-header
               name font size extra-headers header-format-string))
          section-alist))
#+END_SRC
     Then define the document classes
#+BEGIN_SRC emacs-lisp
       (setq org-latex-classes
             (list (org-helper-create-class
                    "article"
                    '(("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
                   (org-helper-create-class
                    "report" 
                    '(("\\part{%s}" . "\\part*{%s}")
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
                   (org-helper-create-class
                    "book"
                    '(("\\part{%s}" . "\\part*{%s}")
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC
** TODO Project management
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init 
    :config 
    :bind )
#+END_SRC

** TODO C/C++
** TODO Python
** TODO More langs

